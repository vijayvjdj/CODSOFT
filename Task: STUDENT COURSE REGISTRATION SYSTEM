import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

class Course {
    String code;
    String title;
    String description;
    int capacity;
    List<String> schedule;

    public Course(String code, String title, String description, int capacity, List<String> schedule) {
        this.code = code;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
    }

    public String toString() {
        return "Course Code: " + code + ", Title: " + title + ", Description: " + description + ", Capacity: " + capacity + ", Schedule: " + schedule;
    }
}

class Student {
    String id;
    String name;
    List<String> registeredCourses;

    public Student(String id, String name) {
        this.id = id;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }

    public void registerCourse(String courseCode) {
        registeredCourses.add(courseCode);
    }

    public void dropCourse(String courseCode) {
        registeredCourses.remove(courseCode);
    }

    public String toString() {
        return "Student ID: " + id + ", Name: " + name + ", Registered Courses: " + registeredCourses;
    }
}

public class CourseDatabase {
    Map<String, Course> courses = new HashMap<>();
    Map<String, Student> students = new HashMap<>();

    public void addCourse(Course course) {
        courses.put(course.code, course);
    }

    public void addStudent(Student student) {
        students.put(student.id, student);
    }

    public void displayCourseListing() {
        for (Course course : courses.values()) {
            System.out.println(course);
        }
    }

    public void studentRegistration(String studentId) {
        if (!students.containsKey(studentId)) {
            System.out.println("Student not found");
            return;
        }
        Student student = students.get(studentId);
        System.out.println("Available courses:");
        for (Course course : courses.values()) {
            if (course.capacity > 0) {
                System.out.println(course);
            }
        }
        System.out.println("Enter the course code to register:");
        Scanner scanner = new Scanner(System.in);
        String courseCode = scanner.nextLine();
        if (!courses.containsKey(courseCode)) {
            System.out.println("Course not found");
            return;
        }
        Course course = courses.get(courseCode);
        if (course.capacity > 0) {
            course.capacity--;
            student.registerCourse(courseCode);
            System.out.println("Course registered successfully");
        } else {
            System.out.println("Course is full");
        }
    }

    public void courseRemoval(String studentId) {
        if (!students.containsKey(studentId)) {
            System.out.println("Student not found");
            return;
        }
        Student student = students.get(studentId);
        System.out.println("Registered courses:");
        for (String courseCode : student.registeredCourses) {
            if (courses.containsKey(courseCode)) {
                System.out.println(courses.get(courseCode));
            }
        }
        System.out.println("Enter the course code to drop:");
        Scanner scanner = new Scanner(System.in);
        String courseCode = scanner.nextLine();
        if (!student.registeredCourses.contains(courseCode)) {
            System.out.println("Course not found");
            return;
        
        }
        student.dropCourse(courseCode);
        System.out.println("Course dropped successfully");
        scanner.close();
    }
    

    public static void main(String[] args) {
        CourseDatabase database = new CourseDatabase();

        Course course1 = new Course("CS101", "CSE", "An introduction to computer science", 20, Arrays.asList("Monday", "Wednesday", "Friday"));
        Course course2 = new Course("CS202", "MPC", "An introduction to MPCss", 20, Arrays.asList("Tuesday", "Thursday"));

        database.addCourse(course1);
        database.addCourse(course2);

        Student student1 = new Student("S001", "John");
        Student student2 = new Student("S002", "Mary");

        database.addStudent(student1);
        database.addStudent(student2);

        database.displayCourseListing();

        database.studentRegistration("S001");

    }
}
